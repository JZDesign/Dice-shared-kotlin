import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

buildscript {
    ext.ios_framework_name = 'DiceKit'
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
}
repositories {
    mavenCentral()
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }

    targets {
        fromPreset(presets.jvm, 'jvm')

        iosArm32("ios32")
        iosArm64("ios64")
        iosX64("ios")

        configure([ios32, ios64, ios]) {
            binaries.framework {
                baseName = "$ios_framework_name"
            }
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64("macos")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
//        jsMain {
//            dependencies {
//                implementation kotlin('stdlib-js')
//            }
//        }
//        jsTest {
//            dependencies {
//                implementation kotlin('test-js')
//            }
//        }
        iosMain {
        }

        iosTest {
        }

        ios32Main {
            dependsOn iosMain
        }

        ios64Main {
            dependsOn iosMain
        }

    }

    task releaseFatFramework(type: FatFrameworkTask) {
        // The fat framework must have the same base name as the initial frameworks.
        baseName = ios_framework_name

        // The default destination directory is '<build directory>/fat-framework'. "buildDir/fat-framework"
        // For Github releases we set the destination to the project Root so it can be consumed via carthage.
        destinationDir = file("$rootDir")

        // Specify the frameworks to be merged.
        from(
                targets.ios.binaries.getFramework("RELEASE"),
                targets.ios32.binaries.getFramework("RELEASE"),
                targets.ios64.binaries.getFramework("RELEASE")
        )
    }
}

tasks.build.dependsOn releaseFatFramework
